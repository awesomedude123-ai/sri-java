package com.amky.dao;

import java.io.FileWriter;
import java.io.IOException;
import java.sql.Types;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.sri.model.NflPlayer;
import com.sri.model.NflPlayers;

@Repository
public class NflPlayerDAO {
	public static NflPlayers list= new NflPlayers();
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	public NflPlayers getAllNflPlayers() throws IOException {
		FileWriter file=new FileWriter("C:/Users/ramsm/Desktop/Java/Class Work/Class Work/nflPlayers.txt");
		List nflPlayersFromQuery;
		nflPlayersFromQuery=jdbcTemplate.query("select* from nflplayers", (rs,RowNum)->
				new NflPlayer(rs.getInt("rankings"),
							rs.getString("firstName"),
							rs.getString("lastName"),
							rs.getString("team"),
							rs.getString("reason"),
							rs.getString("username"),
							rs.getString("password")));
		list.setNflPlayersList(null);
		for(int i=0;i<nflPlayersFromQuery.size();i++) {
			list.getNflPlayersList().add((NflPlayer) nflPlayersFromQuery.get(i));
			NflPlayer nflPlayer = (NflPlayer) nflPlayersFromQuery.get(i);
			System.out.println(nflPlayer.getFirstName());
			file.write(nflPlayer.getRankings() + "," + nflPlayer.getFirstName() + ", " + nflPlayer.getLastName() + ", " + nflPlayer.getTeam() + "\n" + nflPlayer.getReason() + "\n");
		}
		file.close();
		return list;
	}//end getAllNflPlayers method
	
	
	public void addNflPlayer(NflPlayer nflPlayer) {
		System.out.println("Adding new Nfl Player");
		int rankings=nflPlayer.getRankings();
		String insertSql;
		Object[] params;
		int[] types;
		System.out.println(rankings + nflPlayer.getFirstName());
		if(rankings>0) {
			insertSql="INSERT INTO nflplayers(rankings, firstName, lastName, team, reason)" + "VALUES(?,?,?,?,?)";
			params= new Object[] {nflPlayer.getRankings(),nflPlayer.getFirstName(),nflPlayer.getLastName(),nflPlayer.getTeam(),nflPlayer.getReason()};
			types= new int[] {Types.INTEGER,Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.VARCHAR};
		}else {
			insertSql="INSERT INTO nflplayers( firstName, lastName, team, reason)" + "VALUES(?,?,?,?)";
			params= new Object[] {nflPlayer.getFirstName(),nflPlayer.getLastName(),nflPlayer.getTeam(),nflPlayer.getReason()};
			types= new int[] {Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.VARCHAR};
		}
		int row=jdbcTemplate.update(insertSql, params, types);
		System.out.println(row + "Row inserted.");
	}// end addNflPlayer method
	
	public void updateNflPlayer(NflPlayer nflPlayer) {
		System.out.println("Updating new Nfl Player");
		String updateSql="Update nflplayers set firstName=?, lastName=?, team=?, reason=? where rankings=?";
		Object[] params=new Object[] {nflPlayer.getFirstName(),nflPlayer.getLastName(),nflPlayer.getTeam(),nflPlayer.getReason(),nflPlayer.getRankings()};
		int[] types=new int[] {Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.INTEGER};
		int row=jdbcTemplate.update(updateSql, params, types);
		System.out.println(row + "Row updated");
	}// end updateNflPlayer method
	public void deleteNflPlayer(NflPlayer nflPlayer) {
		System.out.println("Deleting an Nfl Player");
		String deleteSql="DELETE FROM nflplayers where rankings=?";
		Object[] params = new Object[] {nflPlayer.getRankings()};
		int[] types=new int[] {Types.INTEGER};
		int row=jdbcTemplate.update(deleteSql, params, types);
		System.out.println(row + "row deleted");
	}// end deleteNflPlayer
	public void changeNflPlayer(NflPlayer nflPlayer) {
		System.out.println("Changing Nfl Player");
		String insertSql="Update nflplayers set firstName=?, lastName=? where rankings=?";
		Object[] params=new Object[] {nflPlayer.getFirstName(),nflPlayer.getLastName(),nflPlayer.getRankings()};
		int[] types=new int[]  {Types.VARCHAR,Types.VARCHAR,Types.INTEGER};
		int row=jdbcTemplate.update(insertSql, params, types);
		System.out.println(row + "Row inserted");
	}//end changeNflPlayer method
	public void changeNflTeam(NflPlayer nflPlayer) {
		System.out.println("Changing Nfl Team");
		String insertSql="Update nflplayers set team=? where rankings=?";
		Object[] params=new Object[] {nflPlayer.getTeam(),nflPlayer.getRankings()};
		int[] types=new int[] {Types.VARCHAR,Types.INTEGER};
		int row=jdbcTemplate.update(insertSql, params, types);
		System.out.println(row + "Row inserted");
	}// end changeNflTeam method
	public int deleteAllNflPlayers() {
		System.out.println("Deleting the table");
		String deleteSql="TRUNCATE nflplayers";
		int row=jdbcTemplate.update(deleteSql);
		return row;
	}// end deleteAllNflPlayers method
	public void changeReason(NflPlayer nflPlayer) {
		System.out.println("Changing reason");
		String insertSql = "Update nflplayers set reason=? where rankings=?";
		Object[] params=new Object[] {nflPlayer.getReason(), nflPlayer.getRankings()};
		int[] types= new int[] {Types.VARCHAR,Types.INTEGER};
		int row=jdbcTemplate.update(insertSql, params, types);
		System.out.println(row + "reason inserted");
	}
	public NflPlayer credential(NflPlayer nflPlayer) {
		System.out.println("Checking credentials");
		String credentialSql="select * from nflplayers username=? and password=?";
		Object[] params= new Object[] {nflPlayer.getUsername(),nflPlayer.getPassword()};
		List nflPlayerFromQuery=jdbcTemplate.query(credentialSql, params, (rs,RowNum)
				->new NflPlayer(
						rs.getString("username"),
						rs.getString("password")));
		NflPlayer vNflPlayer = (NflPlayer)nflPlayerFromQuery.get(0);
		return vNflPlayer;
	}


}// end class

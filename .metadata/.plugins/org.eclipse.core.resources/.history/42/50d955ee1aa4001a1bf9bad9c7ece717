package com.amky.controller;

import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.amky.dao.NflPlayerDAO;
import com.sri.model.NflPlayer;
import com.sri.model.NflPlayers;

@RestController
@RequestMapping(path = "/nflplayers")
public class NflPlayerController {
	@Autowired
	private NflPlayerDAO nflPlayerDao;

	@CrossOrigin(origins="*")
	@GetMapping(path = "/getAllNflPlayers", produces = "application/json")
	public NflPlayers getAllNflPlayers() throws IOException {
		int rankings = nflPlayerDao.getAllNflPlayers().getNflPlayersList().size();
		System.out.println(rankings);
		return nflPlayerDao.getAllNflPlayers();

	}
	
	@CrossOrigin(origins="*")
	@PostMapping(path = "/addNflPlayer", consumes = "application/json", produces = "application/json")
	public ResponseEntity<Object> addNflPlayer(@RequestBody NflPlayer nflPlayer) throws IOException {
		// int rankings=nflPlayerDao.getAllNflPlayers().getCount();
		// nflPlayer.setRankings(rankings);
		// System.out.println(rankings);
		nflPlayerDao.addNflPlayer(nflPlayer);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("{/rankings}")
				.buildAndExpand(nflPlayer.getRankings()).toUri();
		return ResponseEntity.created(location).build();
	}

	@PostMapping(path = "/updateNflPlayer", consumes = "application/json", produces = "application/json")
	public ResponseEntity<Object> updateNflPlayer(@RequestBody NflPlayer nflPlayer) {
		nflPlayerDao.updateNflPlayer(nflPlayer);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("{/rankings}")
				.buildAndExpand(nflPlayer.getRankings()).toUri();
		return ResponseEntity.created(location).build();
	}

	@PostMapping(path = "/deleteNflPlayer", consumes = "application/json", produces = "application/json")
	public ResponseEntity<Object> deleteNflPlayer(@RequestBody NflPlayer nflPlayer) {
		nflPlayerDao.deleteNflPlayer(nflPlayer);
		URI location = ServletUriComponentsBuilder.fromCurrentContextPath().path("{/rankings}")
				.buildAndExpand(nflPlayer.getRankings()).toUri();
		return ResponseEntity.created(location).build();
	}

	@PostMapping(path = "/changeNflPlayer", consumes = "application/json", produces = "application/json")
	public ResponseEntity<Object> changeNflPlayer(@RequestBody NflPlayer nflPlayer) {
		nflPlayerDao.changeNflPlayer(nflPlayer);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("{/rankings}")
				.buildAndExpand(nflPlayer.getRankings()).toUri();
		return ResponseEntity.created(location).build();
	}

	@PostMapping(path = "/changeNflTeam", consumes = "application/json", produces = "application/json")
	public ResponseEntity<Object> changeNflTeam(@RequestBody NflPlayer nflPlayer) {
		nflPlayerDao.changeNflTeam(nflPlayer);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("{/rankings}")
				.buildAndExpand(nflPlayer.getRankings()).toUri();
		return ResponseEntity.created(location).build();
	}
	@DeleteMapping(path="deleteAllNflPlayers", produces="application/json")
	public void deleteAllNflPayers(){
		 nflPlayerDao.deleteAllNflPlayers();
	}
	
	@PostMapping(path="/changeReason", consumes="application/json", produces="application/json")
	public ResponseEntity<Object> changeReason(@RequestBody NflPlayer nflPlayer){
		nflPlayerDao.changeReason(nflPlayer);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("{/rankings}").buildAndExpand(nflPlayer.getRankings()).toUri();
		return ResponseEntity.created(location).build();
	}
	
	@CrossOrigin(origins="*")
	@PostMapping(path="/credentials", consumes="application/json", produces="application/json")
	public NflPlayer credentials(@RequestBody NflPlayer nflPlayer){
		System.out.println("Username:" + nflPlayer.getUsername());
		return nflPlayerDao.credential(nflPlayer);
		
	}
}
